#!/usr1/local/bin/python

import os, sys, re, shutil, random
from tempfile import *


# program location
prog_dir = '/home/jpei/test_promals3d_package/bar/promals_package/bin/'

# program names
promals_web = prog_dir + "progress_for_web.py"

csv_cutoff_g = 5

alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'

def run_promals():

	csv_cutoff = csv_cutoff_g
	# check and parse the command line
	cmd_line = sys.argv
	if len(cmd_line) <= 1: 
		promals_help()
		sys.exit(1)
	elif not os.path.isfile(cmd_line[1]):
                print >> sys.stderr, "Error reading input file:", cmd_line[1]
		promals_help()
		sys.exit(1)
        else:
                randomstring = ""
                infile = os.path.abspath(cmd_line[1])
                infiledir = os.path.split(infile)[0]
                for x in random.sample(alphabet,40):
                        randomstring+=x
                ranfile = "%s/%s" %(infiledir, randomstring)
                try:
                        fp = open(ranfile, "w")
                except:
                        print >> sys.stderr, "Error:"
                        print >> sys.stderr, "      The directory containing your input file is not writable:", infiledir
                        print >> sys.stderr, "      Input file should be in a writable directory"
                        sys.exit(1)
                fp.close()
                os.system("rm -f %s" %ranfile)

	cmd_line1 = []
	outputfile = ""
        blast_dir = ""
        resnum = 1
        caa_freq = 0.8
	for i in range(len(cmd_line)):
		arg = cmd_line[i]
		if i == 0: arg = prog_dir + 'promals_c'
                # change inputfile name to full path name
		if i == 1: 
                        arg = os.path.abspath(arg)
                        inputfile = arg
                # change outfile name to full path name
		if arg == '-outfile':
			if i+1 < len(cmd_line): 
                                cmd_line[i+1] = os.path.abspath(cmd_line[i+1])
                                outputfile = cmd_line[i+1]
                # change blast_dir name to full path name
		if arg == '-blast_dir':
			if i+1 < len(cmd_line): 
                                cmd_line[i+1] = os.path.abspath(cmd_line[i+1])
		#if arg == '-ssw': arg = '-ss_weight'
		#if arg == '-aaw': arg = '-score_weight'
		#if arg == '-max_homologs': arg = '-max_num_sequences'
		#if arg == '-iter_num': arg = '-iter_number'
		if arg == '-csv_index': 
			if i+1 < len(cmd_line):
				csv_cutoff = int(cmd_line[i+1])
				if (csv_cutoff<0) or (csv_cutoff>9):
					csv_cutoff = 5
                if arg == "-resnum":
                        resnum = int(cmd_line[i+1])
                if arg == "-caa_freq":
                        caa_freq = float(sys.argv[i+1])
		cmd_line1.append(arg)
	
	if not outputfile:
		if re.search("\.fa$", inputfile):
			outputfile = re.sub("\.fa$", "", inputfile) + ".promals.aln"
                else: outputfile = inputfile + ".promals.aln"
	if not blast_dir:
                blast_dir = "%s_blast" %inputfile
	
	promals_c = ' '.join(cmd_line1)
        promals_c = re.sub("\s+-resnum\s+\S+", " ", promals_c)
        promals_c = re.sub("\s+-caa_freq\s+\S+", " ", promals_c)
        promals_c = re.sub("\s+-csv_index\s+\S+", " ", promals_c)
        if "-blast_dir" not in promals_c:
                promals_c += " -blast_dir %s " %blast_dir
	outputlogfile = inputfile+".prmls.oUTpUT"
	promals_c = promals_c + " > " + outputlogfile
        print "promals command:"
	print promals_c
        print
        sys.stdout.flush()
	
	# run programs in a temporary directory to avoid .ncbirc problem
        cwd = os.getcwd()
        tmpdir = mkdtemp()
        os.chdir(tmpdir)
        os.system("cp %s.ncbirc ." %prog_dir)
	s1 = os.system(promals_c)
        if s1 == 0:
                print "output alignment file is:", outputfile
                print "blast intermediate files are in:", blast_dir
                print
        else:
                print "Error running promals - check log file for details:", outputlogfile
                print
        print "html file command:"
	print "python %s %s %s -cutoff %d -resnum %d -caa_freq %f" %(promals_web, outputfile, outputlogfile, csv_cutoff, resnum, caa_freq) 
        print
        sys.stdout.flush()
	s2 = os.system("python %s %s %s -cutoff %d -resnum %d -caa_freq %f 2>/dev/null" %(promals_web, outputfile, outputlogfile, csv_cutoff, resnum, caa_freq) )
        if s2 == 0:
                print "output html alignment file is:", outputfile + ".html"
                print
        else:
                print "Error generating html file"
                print

        os.chdir(cwd)
        shutil.rmtree(tmpdir)

def promals_help():

        help_content = '''

promals with 3D information
        
        command: 
                promals input_file [options] > input_file.log
                python promals input_file [options] > input_file.log

        input:
                input_file needs to be FASTA format

        output: 
                Two alignment files will be generated. One is in CLUSTAL 
                format alignment (file name can be specified by option -outfile). 
                The other file is an html file of colored alignment.
 
        Options:

        For alignment strategies:
        -id_thr [0, 1]          Identity threshold that determined the partition of
                                fast and slow alignment processes. If two groups of
                                sequences has average identity above this threshold,
                                align them in a fast way. Otherwise, use slower but
                                more accurate way (by profile-profile alignment with
                                predicted secondary structures and available 3D 
                                constraints). Default: 0.6 (corresponding to 60% identity)

        For using 3D information:
        -dali [0 or 1]          Use DaliLite structural alignment (1) or not use 
                                fast alignment (0) ("DaliLite" executable needs to 
                                be present in bin/ directory). Default: 0 (it is 
                                relatively slow to run DaliLite)
        -fast [0 or 1]          Use fast structural alignment (1) or not use fast 
                                alignment (0) ("fast" executable needs to be present 
                                in bin/ directory). Default: 1
        -tmalign [0 or 1]       Use TMalign structural alignment (1) or not use fast 
                                TMalign alignment (0) ("TMalign" executable needs to 
                                be present in bin/ directory). Default: 1
        -struct_weight [0, inf[ Weight of structural constraints relative to sequence 
                                constraints. Default: 1.5

        For profile scoring:
        -ss_weight [0,inf[      Weight of predicted secondary structure in profile-profile 
                                scoring. Default: 0.2
        -score_weight [0,inf[   Weight of amino acids in profile-profile scoring. 
                                Default: 0.8

        For running PSI-BLAST to get sequence profile:
        -iter_number <int>      Number of PSI-BLAST iterations for profile generation. 
                                Default: 3
        -evalue [0, inf[        PSI-BLAST evalue cutoff for inclusion. Default: 0.001
        -low_id_thr [0,1]       Remove PSI-BLAST hits with identity to the query less than 
                                this value.  Default: 0.2
        -blast_dir <file>       Directory of running PSI-BLAST and store other intermediate 
                                results.
        -clean_blast_before [0 or 1]  Remove any file in the directory that stores 
                                intermediate results (specified by -blast_dir option) before
                                running PSI-BLAST. Default: 0. 
        -clean_blast_after [0 or 1] Remove any file in the PSI-BLAST directory after running
                                 PSI-BLAST. Default: 0

        For output:
        -outfile <file>         The name of output alignment file.
        -blocksize <int>        Number of letters in clustal-format alignment blocks. 
                                Default: 70
        -resnum [0 or 1]        In colored html alignment, show residue numbers for 
                                alignment blocks. Default: 1
        -caa_freq [0, 1]        In colored html alignment, show amino acid consensus
                                symbol if the fraction of a class of residues is higher
                                than this threshold. Default: 0.8

        '''

        print help_content


if __name__ == '__main__':

	run_promals()
